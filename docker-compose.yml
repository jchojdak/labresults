version: '3.8'

networks:
  labresults-network:
    driver: bridge

services:
  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: /config-server/Dockerfile
    ports:
      - "8888:8888"
    networks:
      - labresults-network
    environment:
      SPRING_PROFILES_ACTIVE: native

  postgres:
    container_name: postgres
    image: postgres:16.2-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=labresults
      - POSTGRES_USER=labresults
      - POSTGRES_DB=labresults
    ports:
      - "5432:5432"
    networks:
      - labresults-network
    volumes:
      - db-data:/var/lib/postgresql/data
    depends_on:
      - config-server

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - labresults-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  eureka-server:
    container_name: eureka-server
    build:
      context: .
      dockerfile: /eureka-server/Dockerfile
    restart: always
    ports:
      - "8761:8761"
    networks:
      - labresults-network
    environment:
      spring.config.import: optional:configserver:http://config-server:8888
    depends_on:
      - postgres
      - config-server

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: /api-gateway/Dockerfile
    restart: always
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.config.import: optional:configserver:http://config-server:8888
    ports:
      - "8080:8080"
    networks:
      - labresults-network
    depends_on:
      - eureka-server
      - config-server

  sample-service:
    container_name: sample-service
    build:
      context: .
      dockerfile: /sample-service/Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
    ports:
      - "8082:8082"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: /order-service/Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
    ports:
      - "8083:8083"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  customer-service:
    container_name: customer-service
    build:
      context: .
      dockerfile: /customer-service/Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
    ports:
      - "8084:8084"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  notification-service:
    container_name: notification-service
    build:
      context: .
      dockerfile: /notification-service/Dockerfile
    restart: always
    environment:
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.rabbitmq.host: rabbitmq
    ports:
      - "8085:8085"
    networks:
      - labresults-network
    depends_on:
      - eureka-server
      - config-server
      - rabbitmq

volumes:
  db-data:
  rabbitmq-data: