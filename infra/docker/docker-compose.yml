version: '3.8'

networks:
  labresults-network:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus:v2.53.3
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    networks:
      - labresults-network
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - labresults-network
    volumes:
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: labresults
    depends_on:
      - prometheus

  config-server:
    container_name: config-server
    build:
      context: ../../config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - labresults-network
    environment:
      SPRING_PROFILES_ACTIVE: native
    depends_on:
      - grafana

  postgres:
    container_name: postgres
    image: postgres:16.2-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=labresults
      - POSTGRES_USER=labresults
      - POSTGRES_DB=labresults
    ports:
      - "5432:5432"
    networks:
      - labresults-network
    volumes:
      - db-data:/var/lib/postgresql/data
    depends_on:
      - config-server

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.1.3
    restart: always
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/labresults
      - KC_DB_USERNAME=labresults
      - KC_DB_PASSWORD=labresults
      - KC_HEALTH_ENABLED=true
    ports:
      - "8081:8080"
    networks:
      - labresults-network
    command:
      - start-dev
      - --import-realm
    volumes:
      - ../../keycloak:/opt/keycloak/data/import
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - labresults-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  eureka-server:
    container_name: eureka-server
    build:
      context: ../../eureka-server
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8761:8761"
    networks:
      - labresults-network
    environment:
      spring.config.import: optional:configserver:http://config-server:8888
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres
      - config-server

  api-gateway:
    container_name: api-gateway
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.config.import: optional:configserver:http://config-server:8888
      spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://keycloak:8080/realms/labresults/protocol/openid-connect/certs
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - labresults-network
    depends_on:
      - eureka-server
      - config-server

  sample-service:
    container_name: sample-service
    build:
      context: ../../services/sample-service
      dockerfile: Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  order-service:
    container_name: order-service
    build:
      context: ../../services/order-service
      dockerfile: Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.rabbitmq.host: rabbitmq
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8083:8083"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  customer-service:
    container_name: customer-service
    build:
      context: ../../services/customer-service
      dockerfile: Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8084:8084"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

  notification-service:
    container_name: notification-service
    build:
      context: ../../services/notification-service
      dockerfile: Dockerfile
    restart: always
    environment:
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.rabbitmq.host: rabbitmq
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8085:8085"
    networks:
      - labresults-network
    depends_on:
      - eureka-server
      - config-server
      - rabbitmq

  result-service:
    container_name: result-service
    build:
      context: ../../services/result-service
      dockerfile: Dockerfile
    restart: always
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/labresults
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8086:8086"
    networks:
      - labresults-network
    depends_on:
      - api-gateway
      - eureka-server
      - postgres
      - config-server

volumes:
  db-data:
  rabbitmq-data: